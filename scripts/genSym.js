const fs = require('fs');

function genCharArray(charA, charZ) {
    let a = [], i = charA.charCodeAt(0), j = charZ.charCodeAt(0);
    for (; i <= j; ++i) {
        a.push(String.fromCharCode(i));
    }
    return a;
}

function genSym(descr) {
  let ret = [];
  
  if (!validateSym(descr)) return [];

  const numPins = descr.pins.length;
  console.log(`${numPins} pins`);

  const pps = Math.ceil(numPins / 4);

  const { pin_offset: offset, margin, pin_length } = descr;

  const side = ((pps - 1) * offset) + 2 * margin;
  let pos = [-side / 2, offset - margin + side / 2];

  const or = ['R', 'U', 'L', 'D'];
  const par = [-1, 1, 1, -1];

  let s = 0, t_or, tmp, t_pin, even;

  ret[0] =
  `# Generated by genSym
# ${descr.name}
DEF ${descr.name} ${descr.ref} 0 ${descr.pin_text_offset} Y Y ${descr.units} L N
F0 \"${descr.ref}\" 0 50 50 H V C CNN
F1 \"${descr.name}\" 0 -50 50 H V C CNN
F2 \"\" 0 -50 50 H I C CNN
F3 \"\" 0 -50 50 H I C CNN
DRAW
S ${-side / 2 + pin_length} ${side / 2 - pin_length} ${side / 2 - pin_length} ${-side / 2 + pin_length} 0 1 0 N`

  for (let i = 0; i < numPins; i++) {
    tmp = s;
    s = Math.floor(i / pps);
    even = s % 2 == 0;

    if (tmp != s)  {
      pos[0] += par[s] * margin;
      pos[1] += par[s - 1] * margin;
    } else {
      pos[even ? 1 : 0] += par[s] * offset;
    }

    t_or = or[s];
    ret.push(`X ${descr.pins[i].name || 'PIN'} ${descr.pins[i].num || i} ${pos[0]} ${pos[1]} ${descr.pin_length} ${t_or} 50 50 1 1 ${descr.pins[i].type || 'O'}`);
  }

  ret.push('ENDDRAW\nENDDEF')
  return ret;
}

function validateSym(descr) {
  if (!descr) return false;

  if (!descr.hasOwnProperty("name")) return false;
  if (!descr.hasOwnProperty("ref")) return false;
  if (!descr.hasOwnProperty("units")) return false;
  if (!descr.hasOwnProperty("pins")) return false;
  if (!descr.hasOwnProperty("pin_length")) return false;
  if (!descr.hasOwnProperty("pin_text_offset")) return false;
  if (!descr.hasOwnProperty("pin_offset")) return false;
  if (!descr.hasOwnProperty("margin")) return false;
  if (!descr.pins) return false;

  for (const e of descr.pins) {
    if (!e.hasOwnProperty("name")) return false;
    if (!e.hasOwnProperty("num")) return false;
    if (!e.hasOwnProperty("type")) return false;
  }

  return true;
}

function genBareSym(letter, num) {
  const skel = {
    name: "",
    ref: "",
    units: 1,
    pins: [],
    pin_length: 150,
    pin_text_offset: 60,
    pin_offset: 100,
    margin: 500,
  }

  const a = genCharArray('A', letter);

  for (let i = 0; i < a.length; i++) {
    for (let j = 0; j < num; j++) {
      const pin = {
        name: "PIN",
        num: '0',
        type: 'O',
      }

      pin.num = a[i] + (j + 1);
      skel.pins.push(pin);
    }
  }
  return JSON.stringify(skel);
}

const data = fs.readFileSync('./TC358870XBG.json');

const res = genSym(JSON.parse(data));

res.forEach((a) => console.log(a));
